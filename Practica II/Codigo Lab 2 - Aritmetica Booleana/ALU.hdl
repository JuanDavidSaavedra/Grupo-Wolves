// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //si zx = 0, xAux1 = x 
    //si zx = 1, xAux1 = 00...0
    Mux16(a=x, b[0..15]=false, sel=zx, out=xAux1); 
    Not16(in=xAux1, out=notxAux1);
    Mux16(a=xAux1, b=notxAux1, sel=nx, out=xReady);

    //Hacemos lo mismo con y
    //si zy = 0, yAux1 = y 
    //si zy = 1, yAux1 = 00...0
    Mux16(a=y, b[0..15]=false, sel=zy, out=yAux1); 
    Not16(in=yAux1, out=notyAux1);
    Mux16(a=yAux1, b=notyAux1, sel=ny, out=yReady);

    //Hacemos la suma tanto aritmetica, como bit por bit
    Add16(a=xReady, b=yReady, out=xPlusY); //Aritmetica
    And16(a=xReady, b=yReady, out=xAndY); //Bit por bit

    /*
    * Usamos f como selector del multiplexor para seleccionar que tipo de operacion va en el out:
    * Si f=1, outAux = xPlusY
    * si f=0, outAux = xAndY    
    */
    Mux16(a=xAndY, b=xPlusY, sel=f, out=outAux);

    //Usamos no como selector para decidir si se niega outAux y generar el out final del circuito
    Not16(in=outAux, out=notOutAux);
    Mux16(a=outAux, b=notOutAux, sel=no, out=out, out[0..7]=zrlow, out[8..15]=zrhigh, out[15]=ng);
    
    /*
    * NOTA:
    * Segun Tea Leaves al hacer la operacion Aritmetica usando two's complement (como pide la ALU) 
    * si el bit mas significativo out[15] es igual a 1, entonces por default out será menor a 1
    * y por eso la bandera ng se activará.
    */
    
    /*
    * Nota2:
    * Tanto zrlow, ng, y zrhigh se declararon directamente usando el out del multiplexor de arriba, 
    * porque de otra manera daba error de sintaxis el .hdl
    */
    
    //tomamos el out y procedemos a evaluarlo, Usamos 2 or8way para evaluar si el out es 0 o no

    Or8Way(in=zrlow, out=outflag1);
    Or8Way(in=zrhigh, out=outflag2);
    Or(a=outflag1, b=outflag2, out=outflagFinal);
    
    /*
    * Si el outflagFinal es 0, significa que out es efectivamente 0
    * asi que lo negamos para obtener el valor de zr
    */

    Not(in=outflagFinal, out=zr);


    
    
    
    

    

     

    
    
}